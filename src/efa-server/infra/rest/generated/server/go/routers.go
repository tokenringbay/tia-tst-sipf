/*
 * Simplified IP Fabric
 *
 * This is the spec that defines the API provided by the application to register devices to a fabric, configure fabric parameters, validate all the devices in the fabric and configure switches for IP Fabric with/without overlay
 *
 * API version: 1.0
 * Contact: support@extremenetworks.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v1/",
		Index,
	},

	Route{
		"ClearConfig",
		strings.ToUpper("Post"),
		"/v1/debug/clear",
		ClearConfig,
	},

	Route{
		"ConfigShow",
		strings.ToUpper("Get"),
		"/v1/config",
		ConfigShow,
	},

	Route{
		"ConfigureFabric",
		strings.ToUpper("Post"),
		"/v1/configure",
		ConfigureFabric,
	},

	Route{
		"ExecutionGet",
		strings.ToUpper("Get"),
		"/v1/execution",
		ExecutionGet,
	},

	Route{
		"ExecutionList",
		strings.ToUpper("Get"),
		"/v1/executions",
		ExecutionList,
	},

	Route{
		"CreateFabric",
		strings.ToUpper("Post"),
		"/v1/fabric",
		CreateFabric,
	},

	Route{
		"DeleteFabric",
		strings.ToUpper("Delete"),
		"/v1/fabric",
		DeleteFabric,
	},

	Route{
		"GetFabric",
		strings.ToUpper("Get"),
		"/v1/fabric",
		GetFabric,
	},

	Route{
		"GetFabrics",
		strings.ToUpper("Get"),
		"/v1/fabrics",
		GetFabrics,
	},

	Route{
		"UpdateFabric",
		strings.ToUpper("Put"),
		"/v1/fabric",
		UpdateFabric,
	},

	Route{
		"ValidateFabric",
		strings.ToUpper("Get"),
		"/v1/validate",
		ValidateFabric,
	},

	Route{
		"SupportSave",
		strings.ToUpper("Get"),
		"/v1/support",
		SupportSave,
	},

	Route{
		"GetSwitch",
		strings.ToUpper("Get"),
		"/v1/switch",
		GetSwitch,
	},

	Route{
		"UpdateSwitch",
		strings.ToUpper("Put"),
		"/v1/switch",
		UpdateSwitch,
	},

	Route{
		"CreateSwitches",
		strings.ToUpper("Post"),
		"/v1/switches",
		CreateSwitches,
	},

	Route{
		"DeleteSwitches",
		strings.ToUpper("Delete"),
		"/v1/switches",
		DeleteSwitches,
	},

	Route{
		"GetSwitches",
		strings.ToUpper("Get"),
		"/v1/switches",
		GetSwitches,
	},

	Route{
		"UpdateSwitches",
		strings.ToUpper("Put"),
		"/v1/switches",
		UpdateSwitches,
	},
}
